From 0f0ecec20a2384ea5c680e138babd10c386fa121 Mon Sep 17 00:00:00 2001
From: River <riverfor@gmail.com>
Date: Sun, 6 May 2018 17:23:20 +0800
Subject: [PATCH] cross-compile

---
 numpy/core/src/private/npy_fpmath.h |  2 ++
 numpy/distutils/system_info.py      | 10 ++++++++--
 numpy/distutils/unixccompiler.py    |  4 ++++
 3 files changed, 14 insertions(+), 2 deletions(-)

diff --git a/numpy/core/src/private/npy_fpmath.h b/numpy/core/src/private/npy_fpmath.h
index 86b9cf3da..ce1605801 100644
--- a/numpy/core/src/private/npy_fpmath.h
+++ b/numpy/core/src/private/npy_fpmath.h
@@ -7,6 +7,8 @@
 #include "numpy/npy_cpu.h"
 #include "numpy/npy_common.h"
 
+#define HAVE_LDOUBLE_IEEE_DOUBLE_LE
+
 #ifdef NPY_OS_DARWIN
     /* This hardcoded logic is fragile, but universal builds makes it
      * difficult to detect arch-specific features */
diff --git a/numpy/distutils/system_info.py b/numpy/distutils/system_info.py
index 93a8e6f75..decf4d0c0 100644
--- a/numpy/distutils/system_info.py
+++ b/numpy/distutils/system_info.py
@@ -698,9 +698,11 @@ class system_info(object):
                 continue
 
             if d not in ret:
-                ret.append(d)
+                # Hack for QPython cross compile
+                if not d.lower().startswith("/us"):
+                    ret.append(d)
 
-        log.debug('( %s = %s )', key, ':'.join(ret))
+        log.error('( %s = %s )', key, ':'.join(ret))
         return ret
 
     def get_lib_dirs(self, key='library_dirs'):
@@ -1554,6 +1556,7 @@ class lapack_opt_info(system_info):
             # Use the system lapack from Accelerate or vecLib under OSX
             args = []
             link_args = []
+            """
             if get_platform()[-4:] == 'i386' or 'intel' in get_platform() or \
                'x86_64' in get_platform() or \
                'i386' in platform.platform():
@@ -1574,6 +1577,7 @@ class lapack_opt_info(system_info):
                 else:
                     args.extend(['-faltivec'])
                 link_args.extend(['-Wl,-framework', '-Wl,vecLib'])
+            """
             if args:
                 self.set_info(extra_compile_args=args,
                               extra_link_args=link_args,
@@ -1660,6 +1664,7 @@ class blas_opt_info(system_info):
             # Use the system BLAS from Accelerate or vecLib under OSX
             args = []
             link_args = []
+            """
             if get_platform()[-4:] == 'i386' or 'intel' in get_platform() or \
                'x86_64' in get_platform() or \
                'i386' in platform.platform():
@@ -1684,6 +1689,7 @@ class blas_opt_info(system_info):
                 args.extend([
                     '-I/System/Library/Frameworks/vecLib.framework/Headers'])
                 link_args.extend(['-Wl,-framework', '-Wl,vecLib'])
+            """
             if args:
                 self.set_info(extra_compile_args=args,
                               extra_link_args=link_args,
diff --git a/numpy/distutils/unixccompiler.py b/numpy/distutils/unixccompiler.py
index 6ed5eec6f..b1b6bc8ec 100644
--- a/numpy/distutils/unixccompiler.py
+++ b/numpy/distutils/unixccompiler.py
@@ -107,12 +107,15 @@ def UnixCCompiler_create_static_lib(self, objects, output_libname,
             pass
         self.mkpath(os.path.dirname(output_filename))
         tmp_objects = objects + self.objects
+        from os import environ
+        self.archiver[0] = 'arm-linux-androideabi-ar'
         while tmp_objects:
             objects = tmp_objects[:50]
             tmp_objects = tmp_objects[50:]
             display = '%s: adding %d object files to %s' % (
                            os.path.basename(self.archiver[0]),
                            len(objects), output_filename)
+            #log.error(self.archiver)
             self.spawn(self.archiver + [output_filename] + objects,
                        display = display)
 
@@ -122,6 +125,7 @@ def UnixCCompiler_create_static_lib(self, objects, output_libname,
         # needed -- or maybe Python's configure script took care of
         # it for us, hence the check for leading colon.
         if self.ranlib:
+            self.ranlib[0] = 'arm-linux-androideabi-ranlib'
             display = '%s:@ %s' % (os.path.basename(self.ranlib[0]),
                                    output_filename)
             try:
-- 
2.11.0 (Apple Git-81)

